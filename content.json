{"meta":{"title":"King哥","subtitle":"To know everything, no words don't talk, listening to people is enough to cause alarm（知无不言，言无不尽 言者无罪，闻者足戒）","description":"To know everything, no words don't talk, listening to people is enough to cause alarm（知无不言，言无不尽 言者无罪，闻者足戒）","author":"Jeremy Kinge","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2017-08-14T09:28:56.000Z","updated":"2017-08-14T09:28:56.524Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-08-14T08:51:40.000Z","updated":"2017-08-14T08:52:32.618Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"picture","date":"2017-08-14T09:29:06.000Z","updated":"2017-08-14T09:29:07.017Z","comments":true,"path":"picture/index.html","permalink":"http://yoursite.com/picture/index.html","excerpt":"","text":""},{"title":"标签","date":"2014-12-22T04:39:04.000Z","updated":"2017-08-14T09:29:28.873Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"博客迁移","slug":"博客迁移","date":"2017-08-14T02:26:07.157Z","updated":"2017-08-16T02:35:53.838Z","comments":true,"path":"2017/08/14/博客迁移/","link":"","permalink":"http://yoursite.com/2017/08/14/博客迁移/","excerpt":"","text":"今天周一，天气炎热，调开空调。噼里啪啦的敲完今天的工作，因为今天本人决定再次迁移自己的PersonalBlog。个人一共换过很多个博客，前期使用过网易博客，后来访问量上不去(网易博客他并不是一个IT社区)，后来换到了博客园，感觉还行，但是好景不长，感觉本人有处女座的完美主义，很纠结，总感觉这个博客园UI设计不行。 最后又换到了CSDN，今天又临时决定迁移到了本人的服务器上面，自由管理。 我的性格知道的人应该知道，我是知无不言言无不尽，只要我会的有所感悟的都会分享出来。以后每天心情一更，工作方面一周一更。 最后：人生需要面对,搞笑我是认真的。","categories":[{"name":"心情","slug":"心情","permalink":"http://yoursite.com/categories/心情/"}],"tags":[]},{"title":"Hessian 多系统访问","slug":"Hessian 多系统访问","date":"2017-08-14T01:31:13.972Z","updated":"2017-08-14T02:42:16.677Z","comments":true,"path":"2017/08/14/Hessian 多系统访问/","link":"","permalink":"http://yoursite.com/2017/08/14/Hessian 多系统访问/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"C++文件流操作的读与写","slug":"C-文件流操作的读与写","date":"2014-11-08T13:04:00.000Z","updated":"2017-08-16T06:28:41.777Z","comments":true,"path":"2014/11/08/C-文件流操作的读与写/","link":"","permalink":"http://yoursite.com/2014/11/08/C-文件流操作的读与写/","excerpt":"","text":"对文件的写入put和&lt;&lt; 写入方式 put的操作：是对文件进行写入的操作，写入一个字符（可以使字母也可以是asci码值） 例子： file.put(‘&nbsp;&nbsp;&nbsp;&nbsp; A’); file.put(‘\\n’); file &lt;&lt; “xiezejing1994”; 输出： &nbsp;&nbsp;&nbsp;&nbsp;A// 注意到A这里有几个空格 但是不影响左对齐xiezejing1994// 也就是说A的前面不会有空格 —-put操作和 file &lt;&lt;‘A’这个基本上是一样的，但是有个区别就是他不可以这样file &lt;&lt;’ A’;（A的前面有空格）因为他是格式化输入 所以中间不能有”空格“ –但是这样file &lt;&lt;”‘ A”;（也就是以字符串的格式输入则会有空格） 2.getline（ cin ，string类型 ） getline( cin, z ); file1 &lt;&lt; z; （file1 为文件流对象） *文件的读操作**1.getline（） 例子： char c[100]; while ( !file.eof() ) { file.getline( c,100 ); cout &lt;&lt; c; } 假设文件1.txt内有’ A xiezejing1994 这样文本 它的输出：’ Axiezejing1994 也就是说他没有读到换行的功能 不会输出’ A xiezejing1994（原因就是getlibe其实里面有三个参数，第三个参数默认为’\\n’） 2.getline（ fstream，string ） while ( getline( file,z ) ) { cout &lt;&lt; z; } 1.get（） char c[100]; while ( !file.eof() ) { //file.getline( c,100 ,’\\0’); file.get( c,100 ,’\\0’); cout &lt;&lt; c; } 输出同getline一样 —-必须要写三个参数 否则只会输出一行（第三个参数为’\\n’也是只会输出一行）。非常严格的输出。 2.get操作 char c; file.get(c); while ( !file.eof() ) { cout &lt;&lt; c; file.get(c); } —–和getline的区别在于 他是读取单个字符的，所以会读取到结束符号故会输出‘ Axiezejing1994 *对文件是否读到末尾的判断** 2.feof（） — 该函数只有“已经读取了”结束标志时 feof（）才会返回非零值 也就是说当文件读取到文件结束标志位时他的返回值不是非零还是零 故还要在进行一次读 例子 假设在1.txt中只有abc三个字符在进行while（！feof(fp)） { ch = getc(fp); putchar(ch); }//实际上输出的是四个字符 改为ch = getc（fp）； while （ ！feof（fp））{ putchar（ch）； ch = getc（fp）；}// 这样就可以正常运行 可以不调用函数eof 直接就是while （ file ） // file 就是文件流的对象{。。。。操作} 4.char c[100]; while ( !file.eof() ) { file.getline( c,100 ,’\\0’); cout &lt;&lt; c; } 这个 和char c[100]; while ( !file.eof() ) { file.getline( c,100 ,’\\n’); cout &lt;&lt; c; } 假设文本为上面的。输出分别为’ A xiezejing1994 ‘ Axiezejing1994 5. *读写**1.read( 数组名，接收的个数 )1.write( 数组名，gcount函数 ) #include #include #include using namespace std; int main(){ ifstream file( “D:\\jjj.txt”); ofstream file1( “D:\\j.txt” , ios::app); string z; if ( !file ) { cout &lt;&lt; “ 无法打开\\n “; return 1; } char c[100]; while ( !file.eof() ) { file.read( c,100 ); file1.write( c, file.gcount() ); } file.close(); file.close(); return 0;} **判断打开是否正确** if( !file ) 2.if ( !file.good() ) { cout &lt;&lt; “ 无法打开\\n “; return 1; } 3. if ( !file.is_open() ) { cout &lt;&lt; “ 无法打开\\n “; return 1; } if ( file.fail() ){ cout &lt;&lt; “ 无法打开\\n “;return 1;}","categories":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/categories/c/"}],"tags":[{"name":"文件","slug":"文件","permalink":"http://yoursite.com/tags/文件/"},{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"文件读写","slug":"文件读写","permalink":"http://yoursite.com/tags/文件读写/"}]},{"title":"文章例子","slug":"ceshi","date":"2013-12-02T07:30:16.000Z","updated":"2017-08-16T02:36:44.437Z","comments":true,"path":"2013/12/02/ceshi/","link":"","permalink":"http://yoursite.com/2013/12/02/ceshi/","excerpt":"前言使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；","text":"前言使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 等等；","categories":[{"name":"默认分类","slug":"默认分类","permalink":"http://yoursite.com/categories/默认分类/"}],"tags":[{"name":"tag1","slug":"tag1","permalink":"http://yoursite.com/tags/tag1/"},{"name":"tag2","slug":"tag2","permalink":"http://yoursite.com/tags/tag2/"},{"name":"tag3","slug":"tag3","permalink":"http://yoursite.com/tags/tag3/"}]}]}