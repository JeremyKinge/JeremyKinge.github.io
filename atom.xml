<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>King哥</title>
  <subtitle>To know everything, no words don&#39;t talk, listening to people is enough to cause alarm（知无不言，言无不尽 言者无罪，闻者足戒）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-16T02:35:53.838Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jeremy Kinge</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客迁移</title>
    <link href="http://yoursite.com/2017/08/14/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <id>http://yoursite.com/2017/08/14/博客迁移/</id>
    <published>2017-08-14T02:26:07.157Z</published>
    <updated>2017-08-16T02:35:53.838Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今天周一，天气炎热，调开空调。噼里啪啦的敲完今天的工作，因为今天本人决定再次迁移自己的PersonalBlog。个人一共换过很多个博客，前期使用过网易博客，后来访问量上不去(网易博客他并不是一个IT社区)，后来换到了博客园，感觉还行，但是好景不长，感觉本人有处女座的完美主义，很纠结，总感觉这个博客园UI设计不行。<br>      最后又换到了CSDN，今天又临时决定迁移到了本人的服务器上面，自由管理。<br>      我的性格知道的人应该知道，我是知无不言言无不尽，只要我会的有所感悟的都会分享出来。以后每天心情一更，工作方面一周一更。</p>
</blockquote>
<hr>
<blockquote>
<p>最后：人生需要面对,搞笑我是认真的。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天周一，天气炎热，调开空调。噼里啪啦的敲完今天的工作，因为今天本人决定再次迁移自己的PersonalBlog。个人一共换过很多个博客，前期使用过网易博客，后来访问量上不去(网易博客他并不是一个IT社区)，后来换到了博客园，感觉还行，但是好景不长，
    
    </summary>
    
      <category term="心情" scheme="http://yoursite.com/categories/%E5%BF%83%E6%83%85/"/>
    
    
  </entry>
  
  <entry>
    <title>Hessian 多系统访问</title>
    <link href="http://yoursite.com/2017/08/14/Hessian%20%E5%A4%9A%E7%B3%BB%E7%BB%9F%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2017/08/14/Hessian 多系统访问/</id>
    <published>2017-08-14T01:31:13.972Z</published>
    <updated>2017-08-14T02:42:16.677Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++文件流操作的读与写</title>
    <link href="http://yoursite.com/2014/11/08/C-%E6%96%87%E4%BB%B6%E6%B5%81%E6%93%8D%E4%BD%9C%E7%9A%84%E8%AF%BB%E4%B8%8E%E5%86%99/"/>
    <id>http://yoursite.com/2014/11/08/C-文件流操作的读与写/</id>
    <published>2014-11-08T13:04:00.000Z</published>
    <updated>2017-08-16T06:28:41.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对文件的写入"><a href="#对文件的写入" class="headerlink" title="对文件的写入"></a>对文件的写入</h1><h2 id="put和-lt-lt-写入方式"><a href="#put和-lt-lt-写入方式" class="headerlink" title="put和&lt;&lt; 写入方式"></a>put和&lt;&lt; 写入方式</h2><ul>
<li>put的操作：是对文件进行写入的操作，写入一个字符（可以使字母也可以是asci码值）</li>
</ul>
<blockquote>
<p>例子：<br>        file.put(‘&nbsp;&nbsp;&nbsp;&nbsp;   A’);<br>        file.put(‘\n’);<br>        file &lt;&lt; “xiezejing1994”;</p>
</blockquote>
<hr>
<blockquote>
<p>输出： &nbsp;&nbsp;&nbsp;&nbsp;A// 注意到A这里有几个空格 但是不影响左对齐<br>xiezejing1994// 也就是说A的前面不会有空格</p>
</blockquote>
<p>—-put操作和 file &lt;&lt;‘A’这个基本上是一样的，但是有个区别就是他不可以这样file &lt;&lt;’  A’;（A的前面有空格）因为他是格式化输入 所以中间不能有”空格“</p>
<p>–但是这样file &lt;&lt;”‘       A”;（也就是以字符串的格式输入则会有空格）</p>
<p>2.getline（ cin ，string类型 ）</p>
<p> getline( cin, z );<br>  file1 &lt;&lt; z;  （file1 为文件流对象）</p>
<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>文件的读操作<strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong><br>1.getline（）</p>
<p>例子：<br> char c[100];</p>
<p> while ( !file.eof() )<br> {<br>  file.getline( c,100 );<br>  cout &lt;&lt; c;<br> }</p>
<p>假设文件1.txt内有’       A<br>                 xiezejing1994  这样文本</p>
<p>它的输出：’       Axiezejing1994  也就是说他没有读到换行的功能<br> 不会输出’       A<br>         xiezejing1994（原因就是getlibe其实里面有三个参数，第三个参数默认为’\n’）</p>
<p>2.getline（ fstream，string ）</p>
<p> while ( getline( file,z ) )<br> {<br>   cout &lt;&lt; z;<br> }</p>
<p>1.get（）<br> char c[100];</p>
<p> while ( !file.eof() )<br> {<br>  //file.getline( c,100 ,’\0’);<br>  file.get( c,100 ,’\0’);<br>  cout &lt;&lt; c;<br> }</p>
<p>输出同getline一样</p>
<p>—-必须要写三个参数 否则只会输出一行（第三个参数为’\n’也是只会输出一行）。非常严格的输出。</p>
<p>2.get操作</p>
<p> char c;<br> file.get(c);<br> while ( !file.eof() )<br> {<br>  cout &lt;&lt; c;<br>  file.get(c);</p>
<p> }</p>
<p>—–和getline的区别在于 他是读取单个字符的，所以会读取到结束符号<br>故会输出<br>‘       A<br>xiezejing1994</p>
<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>对文件是否读到末尾的判断<strong><strong><em>**</em></strong></strong></p>
<p>2.<br>feof（） — 该函数只有“已经读取了”结束标志时 feof（）才会返回非零值  也就是说当文件读取到文件结束标志位时他的返回值不是非零还是零 故还要在进行一次读</p>
<p>例子 假设在1.txt中只有abc三个字符<br>在进行<br>while（！feof(fp)）<br> {<br>   ch = getc(fp);<br>   putchar(ch);</p>
<p> }//实际上输出的是四个字符</p>
<p>改为<br>ch = getc（fp）；</p>
<p>while （ ！feof（fp））<br>{<br>   putchar（ch）；<br>   ch = getc（fp）；<br>}// 这样就可以正常运行</p>
<ol>
<li>可以不调用函数eof 直接就是<br>while （ file ） // file 就是文件流的对象<br>{<br>。。。。操作<br>}</li>
</ol>
<p>4.<br>char c[100];</p>
<p> while ( !file.eof() )<br> {<br>  file.getline( c,100 ,’\0’);<br>  cout &lt;&lt; c;<br> }</p>
<p>这个 和<br>char c[100];</p>
<p> while ( !file.eof() )<br> {<br>  file.getline( c,100 ,’\n’);<br>  cout &lt;&lt; c;<br> }</p>
<p>假设文本为上面的。<br>输出分别为’       A<br>          xiezejing1994</p>
<p>‘       Axiezejing1994</p>
<p>5.</p>
<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>读写<strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong><br>1.read( 数组名，接收的个数 )<br>1.write( 数组名，gcount函数  )</p>
<p>#include <iostream></iostream></p>
<p>#include <fstream></fstream></p>
<p>#include <string><br>using namespace std;</string></p>
<p>int main()<br>{<br> ifstream file( “D:\jjj.txt”);<br> ofstream file1( “D:\j.txt” , ios::app);<br> string z;</p>
<p> if ( !file )<br> {<br>     cout &lt;&lt; “ 无法打开\n “;<br>  return 1;<br> }</p>
<p> char c[100];</p>
<p> while ( !file.eof() )<br> {<br>  file.read( c,100  );<br>  file1.write( c, file.gcount() );</p>
<p> }</p>
<p> file.close();<br> file.close();</p>
<p>return 0;<br>}</p>
<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>判断打开是否正确<strong><strong><strong>**</strong></strong></strong></p>
<ol>
<li>if( !file )</li>
</ol>
<p>2.if ( !file.good() )<br> {<br>     cout &lt;&lt; “ 无法打开\n “;<br>  return 1;<br> }</p>
<p>3.<br> if ( !file.is_open() )<br> {<br>     cout &lt;&lt; “ 无法打开\n “;<br>  return 1;<br> }</p>
<ol>
<li>if ( file.fail() )<br>{<br>  cout &lt;&lt; “ 无法打开\n “;<br>return 1;<br>}</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对文件的写入&quot;&gt;&lt;a href=&quot;#对文件的写入&quot; class=&quot;headerlink&quot; title=&quot;对文件的写入&quot;&gt;&lt;/a&gt;对文件的写入&lt;/h1&gt;&lt;h2 id=&quot;put和-lt-lt-写入方式&quot;&gt;&lt;a href=&quot;#put和-lt-lt-写入方式&quot; class
    
    </summary>
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
      <category term="文件" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="文件读写" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>文章例子</title>
    <link href="http://yoursite.com/2013/12/02/ceshi/"/>
    <id>http://yoursite.com/2013/12/02/ceshi/</id>
    <published>2013-12-02T07:30:16.000Z</published>
    <updated>2017-08-16T02:36:44.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用github pages服务搭建博客的好处有：</p>
<ol>
<li>全是静态文件，访问速度快；</li>
<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li>
<li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li>
</ol>
<a id="more"></a>
<ol>
<li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li>
<li>博客内容可以轻松打包、转移、发布到其它平台；</li>
<li>等等；</li>
</ol>
]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
      <category term="默认分类" scheme="http://yoursite.com/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="tag1" scheme="http://yoursite.com/tags/tag1/"/>
    
      <category term="tag2" scheme="http://yoursite.com/tags/tag2/"/>
    
      <category term="tag3" scheme="http://yoursite.com/tags/tag3/"/>
    
  </entry>
  
</feed>
